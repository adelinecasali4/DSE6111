library(tidyr)
install.packages("tidyr")
library(dplyr)
library(ggplot2)
library(plyr)
library(purrr)
library(readr)
library(tidyr)
library(tidyverse)
library(tinytex)
tinytex::install_tinytex()
x <- 10
y <- 5
z <- 20
y > x > z
(x < z) && (x > y)
(x =! z) && (y =! z)
(x =! z) | (y =! z)
(x + 2y) == z
(x + 2*y) == z
(x + (2*y)) == z
x <- 10
y <- 5
z <- 20
x <- 10
y <- 5
z <- 20
(x < z) && (x > y)
(x =! z) | (y =! z)
(x + (2*y)) == z
test_vector <- c(1,5,11:22)
#your code below
#your code below
x <- 10
y <- 5
z <- 20
(x + (2*y)) == z
test_vector <- c(1,5,11:22)
c(x, y, z) %in% test_vector
test_vector <- c(1,5,11:22)
x | y | z %in% test_vector
test_vector[(x == test_vector) | (y == test_vector) | (z == test_vector)]
x <- 10
y <- 5
z <- 20
(x < z) && (x > y)
(x =! z) | (y =! z)
(x + (2*y)) == z
test_vector <- c(1,5,11:22)
x | y | z %in% test_vector
test_vector[(x == test_vector) | (y == test_vector) | (z == test_vector)]
x <- 10
y <- 5
z <- 20
(x < z) && (x > y)
(x =! z) | (y =! z)
x <- 10
y <- 5
z <- 20
(x < z) && (x > y)
(x != z) | (y != z)
(x + (2*y)) == z
x <- 10
y <- 5
z <- 20
(x < z) && (x > y)
(x != z) | (y != z)
(x + (2*y)) == z
test_vector <- c(1,5,11:22)
x | y | z %in% test_vector
test_vector[(x == test_vector) | (y == test_vector) | (z == test_vector)]
getwd()
setwd("/Users/adelinecasali/Desktop/DSE6111")
install.packages("ISL")
install.packages("ISLR")
library(ISLR)
?Auto
pairs(Auto)
view(Auto)
Auto
Auto_correlation_matrix <- cor(Auto[, -1])  # Exclude the first column (name)
for (col_name in colnames(Auto)) {
if (col_name != "name") {
Auto[[col_name]] <- as.numeric(Auto[[col_name]])
}
}
Auto_correlation_matrix <- cor(Auto[, -1])  # Exclude the first column (name)
for (col_name in colnames(Auto)) {
if (col_name != "name") {
Auto[[col_name]] <- as.numeric(Auto[[col_name]])
}
}
Auto_correlation_matrix <- cor(Auto[, -1])  # Exclude the first column (name)
for (col_name in colnames(Auto)) {
if (col_name != "name") {
Auto[[col_name]] <- as.numeric(Auto[[col_name]])
}
}
Auto_correlation_matrix <- cor(Auto[, -1])  # Exclude the first column (name)
View(Auto)
library(ISLR)
pairs(Auto)
for (col_name in colnames(Auto)) {
if (col_name != "name") {
Auto[[col_name]] <- as.numeric(Auto[[col_name]])
}
}
Auto_correlation_matrix <- cor(Auto[, -1])  # Exclude the first column (name)
Auto_correlation_matrix <- cor(Auto[, -9])  # Exclude the first column (name)
print(Auto_correlation_matrix)
Auto_correlation_matrix <- cor(Auto[, -9])
print(Auto_correlation_matrix)
mpg_lmodel <- lm(mpg ~ . - name, data = Auto)
summary(mpg_lmodel)
par(mfrow=c(2,2))
plot(model)
par(mfrow=c(2,2))
plot(mpg_lmodel)
mpg_lmodel_with_interactions <- lm(mpg ~ cylinders * displacement + displacement * horsepower + weight * acceleration + year * origin, data = Auto)
mpg_lmodel_with_interactions <- lm(mpg ~ cylinders * displacement + displacement * horsepower + weight * acceleration + year * origin, data = Auto)
summary(mpg_lmodel_with_interactions)
mpg_lmodel_with_interactions <- lm(mpg ~ (cylinders * displacement * horsepower * weight * acceleration * year * origin), data = Auto)
summary(mpg_lmodel_with_interactions)
mpg_lmodel_with_interactions <- lm(mpg ~ (cylinders + displacement + horsepower + weight + acceleration + year + origin)^2, data = Auto)
summary(mpg_lmodel_with_interactions)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), "name")
par(mfrow = c(4, 3))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
}
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), "name")
par(mfrow = c(4, 3))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
}
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), "name")
par(mfrow = c(4, 6))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
}
library(ISLR)
pairs(Auto)
Auto_correlation_matrix <- cor(Auto[, -9])
print(Auto_correlation_matrix)
mpg_lmodel <- lm(mpg ~ . - name, data = Auto)
summary(mpg_lmodel)
par(mfrow=c(2,2))
plot(mpg_lmodel)
mpg_lmodel_with_interactions <- lm(mpg ~ (cylinders + displacement + horsepower + weight + acceleration + year + origin)^2, data = Auto)
summary(mpg_lmodel_with_interactions)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), "name")
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
}
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg")
for (variable in variables_to_plot) {
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
}
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Create a new linear model with transformations
mpg_lmodel_transformed <- lm(mpg ~ cylinders + I(displacement^2) + log(horsepower) + weight + acceleration + sqrt(year) + origin, data = Auto)
summary(mpg_lmodel_transformed)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Create a new linear model with transformations
mpg_lmodel_transformed <- lm(mpg ~ cylinders + I(displacement^2) + log(horsepower) + weight + sqrt(acceleration) + year + origin, data = Auto)
summary(mpg_lmodel_transformed)
sales_lmodel <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(sales_lmodel)
sales_lmodel <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(sales_lmodel)
sales_lmodel_updated <- lm(Sales ~ Price + US, data = Carseats)
summary(sales_lmodel_updated)
confint(model_e)
confint(sales_lmodel_updated)
par(mfrow = c(2, 2))
plot(sales_lmodel_updated)
library(ISLR)
pairs(Auto)
Auto_correlation_matrix <- cor(Auto[, -9])
print(Auto_correlation_matrix)
mpg_lmodel <- lm(mpg ~ . - name, data = Auto)
summary(mpg_lmodel)
par(mfrow=c(2,2))
plot(mpg_lmodel)
mpg_lmodel_interactions <- lm(mpg ~ (cylinders + displacement + horsepower + weight + acceleration + year + origin)^2, data = Auto)
summary(mpg_lmodel_interactions)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Create a new linear model with transformations
mpg_lmodel_transformed <- lm(mpg ~ cylinders + I(displacement^2) + log(horsepower) + weight + sqrt(acceleration) + year + origin, data = Auto)
summary(mpg_lmodel_transformed)
sales_lmodel <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(sales_lmodel)
sales_lmodel_updated <- lm(Sales ~ Price + US, data = Carseats)
summary(sales_lmodel_updated)
confint(sales_lmodel_updated)
par(mfrow = c(2, 2))
plot(sales_lmodel_updated)
set.seed(1)
x1=runif(100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1+0.3*x2+rnorm(100)
cor(x1, x2)
plot(x1, x2, main = "Scatterplot of x1 vs. x2", xlab = "x1", ylab = "x2")
text(0.2, 0.5, paste("Correlation:", round(correlation, 2)))
x1_x2_cor <- cor(x1, x2)
plot(x1, x2, main = "Scatterplot of x1 vs. x2", xlab = "x1", ylab = "x2")
text(0.2, 0.5, paste("Correlation:", round(x1_x2_cor, 2)))
x1_x2_lmodel <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel)
x1_lmodel <- lm(y ~ x1)
summary(x1_lmodel)
x2_lmodel <- lm(y ~ x2)
summary(x2_lmodel)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
plot(x1, x2, xlab = "x1", ylab = "x2", main = "Scatterplot of x1 and x2")
points(x1, y, col = "red")
points(x2, y, col = "blue")
legend("topleft", legend = c("x1", "x2", "y"), col = c("black", "blue", "red"), pch = 1)
pairs(Auto)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x2_lmodel_updated)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x2_lmodel_updated)
plot(x1, y, main="Scatterplot of y vs. x1", xlab="x1", ylab="y")
plot(x2, y, main="Scatterplot of y vs. x2", xlab="x2", ylab="y")
plot(x1, x2, main="Scatterplot of x1 vs. x2", xlab="x1", ylab="x2")
x2_lmodel <- lm(y ~ x2)
summary(x2_lmodel)
par(mfrow = c(2, 2))
plot(x2_lmodel)
x1_lmodel <- lm(y ~ x1)
summary(x1_lmodel)
par(mfrow = c(2, 2))
plot(x1_lmodel)
library(ISLR)
pairs(Auto)
Auto_correlation_matrix <- cor(Auto[, -9])
print(Auto_correlation_matrix)
mpg_lmodel <- lm(mpg ~ . - name, data = Auto)
summary(mpg_lmodel)
par(mfrow=c(2,2))
plot(mpg_lmodel)
mpg_lmodel_interactions <- lm(mpg ~ (cylinders + displacement + horsepower + weight + acceleration + year + origin)^2, data = Auto)
summary(mpg_lmodel_interactions)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Create a new linear model with transformations
mpg_lmodel_transformed <- lm(mpg ~ cylinders + I(displacement^2) + log(horsepower) + weight + sqrt(acceleration) + year + origin, data = Auto)
summary(mpg_lmodel_transformed)
sales_lmodel <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(sales_lmodel)
sales_lmodel_updated <- lm(Sales ~ Price + US, data = Carseats)
summary(sales_lmodel_updated)
confint(sales_lmodel_updated)
par(mfrow = c(2, 2))
plot(sales_lmodel_updated)
set.seed(1)
x1=runif(100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1+0.3*x2+rnorm(100)
x1_x2_cor <- cor(x1, x2)
plot(x1, x2, main = "Scatterplot of x1 vs. x2", xlab = "x1", ylab = "x2")
text(0.2, 0.5, paste("Correlation:", round(x1_x2_cor, 2)))
x1_x2_lmodel <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel)
x1_lmodel <- lm(y ~ x1)
summary(x1_lmodel)
x2_lmodel <- lm(y ~ x2)
summary(x2_lmodel)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x2_lmodel_updated)
plot(x1, y, main="Scatterplot of y vs. x1", xlab="x1", ylab="y")
plot(x2, y, main="Scatterplot of y vs. x2", xlab="x2", ylab="y")
plot(x1, x2, main="Scatterplot of x1 vs. x2", xlab="x1", ylab="x2")
library(ISLR)
pairs(Auto)
Auto_correlation_matrix <- cor(Auto[, -9])
print(Auto_correlation_matrix)
mpg_lmodel <- lm(mpg ~ . - name, data = Auto)
summary(mpg_lmodel)
par(mfrow=c(2,2))
plot(mpg_lmodel)
mpg_lmodel_interactions <- lm(mpg ~ (cylinders + displacement + horsepower + weight + acceleration + year + origin)^2, data = Auto)
summary(mpg_lmodel_interactions)
# Make plots of all numeric variables vs mpg to check for linearity.
variables_to_plot <- setdiff(names(Auto), c("name", "mpg"))
for (variable in variables_to_plot) {
plot(Auto$mpg, Auto[, variable], xlab = "mpg", ylab = variable, main = paste("Scatterplot of", variable, "vs. mpg"))
abline(lm(Auto[, variable] ~ Auto$mpg), col = "red")
}
# Create a new linear model with transformations
mpg_lmodel_transformed <- lm(mpg ~ cylinders + I(displacement^2) + log(horsepower) + weight + sqrt(acceleration) + year + origin, data = Auto)
summary(mpg_lmodel_transformed)
sales_lmodel <- lm(Sales ~ Price + Urban + US, data = Carseats)
summary(sales_lmodel)
sales_lmodel_updated <- lm(Sales ~ Price + US, data = Carseats)
summary(sales_lmodel_updated)
confint(sales_lmodel_updated)
par(mfrow = c(2, 2))
plot(sales_lmodel_updated)
set.seed(1)
x1=runif(100)
x2=0.5*x1+rnorm(100)/10
y=2+2*x1+0.3*x2+rnorm(100)
x1_x2_cor <- cor(x1, x2)
plot(x1, x2, main = "Scatterplot of x1 vs. x2", xlab = "x1", ylab = "x2")
text(0.2, 0.5, paste("Correlation:", round(x1_x2_cor, 2)))
x1_x2_lmodel <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel)
par(mfrow = c(2, 2))
plot(x1_x2_lmodel)
x1_lmodel <- lm(y ~ x1)
summary(x1_lmodel)
par(mfrow = c(2, 2))
plot(x1_lmodel)
x2_lmodel <- lm(y ~ x2)
summary(x2_lmodel)
par(mfrow = c(2, 2))
plot(x2_lmodel)
x1 = c(x1, 0.1)
x2 = c(x2, 0.8)
y = c(y, 6)
x1_x2_lmodel_updated <- lm(y ~ x1 + x2)
summary(x1_x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_x2_lmodel_updated)
x1_lmodel_updated <- lm(y ~ x1)
summary(x1_lmodel_updated)
par(mfrow = c(2, 2))
plot(x1_lmodel_updated)
x2_lmodel_updated <- lm(y ~ x2)
summary(x2_lmodel_updated)
par(mfrow = c(2, 2))
plot(x2_lmodel_updated)
plot(x1, y, main="Scatterplot of y vs. x1", xlab="x1", ylab="y")
plot(x2, y, main="Scatterplot of y vs. x2", xlab="x2", ylab="y")
plot(x1, x2, main="Scatterplot of x1 vs. x2", xlab="x1", ylab="x2")
