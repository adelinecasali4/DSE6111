cat("Test error rate:", oj_cv_test_err, "%", "\n")
Hitters <- na.omit(Hitters)
Hitters$Salary <- log(Hitters$Salary)
hitters_train <- Hitters[1:200, ]
hitters_test <- Hitters[201:nrow(Hitters), ]
set.seed(123)
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian", n.trees = 1000)
library(ISLR2)
library(tree)
library(randomForest)
library(BART)
library(gbm)
set.seed(123)
carseats_train <- sample(1:nrow(Carseats), nrow(Carseats) / 2)
carseats_test <- Carseats[-carseats_train, "Sales"]
tree_carseats <- tree(Sales ~ ., Carseats, subset = carseats_train)
summary(tree_carseats)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
yhat_carseats <- predict(tree_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_carseats - carseats_test)^2), "\n")
cv_carseats <- cv.tree(tree_carseats)
plot(cv_carseats$size, cv_carseats$dev, type = "b")
# The best value is 6
prune_carseats <- prune.tree(tree_carseats, best = 6)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
yhat_cv_carseats <- predict(prune_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_cv_carseats - carseats_test)^2), "\n")
set.seed(123)
bag_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 10, importance = TRUE)
bag_carseats
yhat_bag_carseats <- predict(bag_carseats, newdata = Carseats[-carseats_train, ])
importance(bag_carseats)
varImpPlot(bag_carseats)
cat("MSE:", mean((yhat_bag_carseats - carseats_test)^2), "\n")
set.seed(123)
rf_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 5, importance = TRUE)
yhat_rf_carseats <- predict(rf_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_rf_carseats - carseats_test)^2), "\n")
importance(rf_carseats)
varImpPlot(rf_carseats)
x_carseats <- Carseats[, 1:11]
y_carseats <- Carseats[, "Sales"]
xtrain_carseats <- x_carseats[carseats_train, ]
ytrain_carseats <- y_carseats[carseats_train]
xtest_carseats <- x_carseats[-carseats_train, ]
ytest_carseats <- y_carseats[-carseats_train]
set.seed(123)
bart_carseats <- gbart(xtrain_carseats, ytrain_carseats, x.test = xtest_carseats)
yhat_bart_carseats <- bart_carseats$yhat.test.mean
cat("MSE:", mean((ytest_carseats - yhat_bart_carseats)^2), "\n")
set.seed(123)
oj_train <- sample(1:nrow(OJ), 800)
oj_test <- OJ[-oj_train, "Purchase"]
tree_oj <- tree(Purchase ~ ., OJ, subset = oj_train)
summary(tree_oj)
tree_oj
plot(tree_oj)
text(tree_oj, pretty = 0)
set.seed(123)
oj_train_index <- sample(1:nrow(OJ), 800)
oj_train <- OJ[oj_train_index, ]
oj_test <- OJ[-oj_train_index, ]
tree_pred_oj <- predict(tree_oj, newdata = oj_test, type = "class")
table(tree_pred_oj, oj_test$Purchase)
oj_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_test_acc, "%", "\n")
oj_test_err <- 100 - oj_test_acc
cat("Test error rate:", oj_test_err, "%", "\n")
set.seed(123)
cv_oj <- cv.tree(tree_oj, FUN = prune.misclass)
names(cv_oj)
cv_oj
par(mfrow = c(1,2))
plot(cv_oj$size, cv_oj$dev, type = "b")
plot(cv_oj$k, cv_oj$dev, type = "b")
prune_oj <- prune.misclass(tree_oj, best = 5)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
summary(prune_oj)
tree_pred_oj_cv <- predict(prune_oj, oj_test, type = "class")
table(tree_pred_oj_cv, oj_test$Purchase)
oj_cv_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_cv_test_acc, "%", "\n")
oj_cv_test_err <- 100 - oj_cv_test_acc
cat("Test error rate:", oj_cv_test_err, "%", "\n")
Hitters <- na.omit(Hitters)
Hitters$Salary <- log(Hitters$Salary)
hitters_train <- Hitters[1:200, ]
hitters_test <- Hitters[201:nrow(Hitters), ]
set.seed(123)
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian", n.trees = 1000)
summary(boost_hitters)
hitters_train$Salary <- as.numeric(as.character(hitters_train$Salary))
hitters_test$Salary <- as.numeric(as.character(hitters_test$Salary))
yhat_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000)
mean((yhat_boost_hitters - hitters_test)^2)
set.seed(123)
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian", n.trees = 1000)
summary(boost_hitters)
hitters_train$Salary <- as.numeric(as.character(hitters_train$Salary))
hitters_test$Salary <- as.numeric(as.character(hitters_test$Salary))
yhat_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000)
yhat_boost_hitters <- as.numeric(yhat_boost_hitters)
mean((yhat_boost_hitters - hitters_test)^2)
set.seed(123)
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian", n.trees = 1000)
summary(boost_hitters)
yhat_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000)
mean((yhat_boost_hitters - hitters_test)^2)
library(ISLR2)
library(tree)
library(randomForest)
library(BART)
library(gbm)
set.seed(123)
carseats_train <- sample(1:nrow(Carseats), nrow(Carseats) / 2)
carseats_test <- Carseats[-carseats_train, "Sales"]
tree_carseats <- tree(Sales ~ ., Carseats, subset = carseats_train)
summary(tree_carseats)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
yhat_carseats <- predict(tree_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_carseats - carseats_test)^2), "\n")
cv_carseats <- cv.tree(tree_carseats)
plot(cv_carseats$size, cv_carseats$dev, type = "b")
# The best value is 6
prune_carseats <- prune.tree(tree_carseats, best = 6)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
yhat_cv_carseats <- predict(prune_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_cv_carseats - carseats_test)^2), "\n")
set.seed(123)
bag_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 10, importance = TRUE)
bag_carseats
yhat_bag_carseats <- predict(bag_carseats, newdata = Carseats[-carseats_train, ])
importance(bag_carseats)
varImpPlot(bag_carseats)
cat("MSE:", mean((yhat_bag_carseats - carseats_test)^2), "\n")
set.seed(123)
rf_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 5, importance = TRUE)
yhat_rf_carseats <- predict(rf_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_rf_carseats - carseats_test)^2), "\n")
importance(rf_carseats)
varImpPlot(rf_carseats)
x_carseats <- Carseats[, 1:11]
y_carseats <- Carseats[, "Sales"]
xtrain_carseats <- x_carseats[carseats_train, ]
ytrain_carseats <- y_carseats[carseats_train]
xtest_carseats <- x_carseats[-carseats_train, ]
ytest_carseats <- y_carseats[-carseats_train]
set.seed(123)
bart_carseats <- gbart(xtrain_carseats, ytrain_carseats, x.test = xtest_carseats)
yhat_bart_carseats <- bart_carseats$yhat.test.mean
cat("MSE:", mean((ytest_carseats - yhat_bart_carseats)^2), "\n")
set.seed(123)
oj_train <- sample(1:nrow(OJ), 800)
oj_test <- OJ[-oj_train, "Purchase"]
tree_oj <- tree(Purchase ~ ., OJ, subset = oj_train)
summary(tree_oj)
tree_oj
plot(tree_oj)
text(tree_oj, pretty = 0)
set.seed(123)
oj_train_index <- sample(1:nrow(OJ), 800)
oj_train <- OJ[oj_train_index, ]
oj_test <- OJ[-oj_train_index, ]
tree_pred_oj <- predict(tree_oj, newdata = oj_test, type = "class")
table(tree_pred_oj, oj_test$Purchase)
oj_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_test_acc, "%", "\n")
oj_test_err <- 100 - oj_test_acc
cat("Test error rate:", oj_test_err, "%", "\n")
set.seed(123)
cv_oj <- cv.tree(tree_oj, FUN = prune.misclass)
names(cv_oj)
cv_oj
par(mfrow = c(1,2))
plot(cv_oj$size, cv_oj$dev, type = "b")
plot(cv_oj$k, cv_oj$dev, type = "b")
prune_oj <- prune.misclass(tree_oj, best = 5)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
summary(prune_oj)
tree_pred_oj_cv <- predict(prune_oj, oj_test, type = "class")
table(tree_pred_oj_cv, oj_test$Purchase)
oj_cv_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_cv_test_acc, "%", "\n")
oj_cv_test_err <- 100 - oj_cv_test_acc
cat("Test error rate:", oj_cv_test_err, "%", "\n")
Hitters <- na.omit(Hitters)
Hitters$Salary <- log(Hitters$Salary)
hitters_train <- Hitters[1:200, ]
hitters_test <- Hitters[201:nrow(Hitters), ]
set.seed(123)
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian", n.trees = 1000)
summary(boost_hitters)
yhat_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000)
mean((yhat_boost_hitters - hitters_test)^2)
set.seed(123)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
set.seed(123)
shrinkage_values <- c(0.001, 0.01, 0.1, 0.2, 0.5, 0.8, 1)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
# Perform boosting for each shrinkage value
for (i in seq_along(shrinkage_values)) {
# Fit the boosting model
boost_model <- gbm(Salary ~ ., data = train_set, distribution = "gaussian",
n.trees = 1000, shrinkage = shrinkage_values[i])
# Make predictions on the training set
predictions <- predict(boost_model, train_set, n.trees = 1000)
# Calculate Mean Squared Error
mse <- mean((exp(predictions) - exp(train_set$Salary))^2)  # Back-transform from log scale
results$MSE[i] <- mse
}
set.seed(123)
shrinkage_values <- c(0.001, 0.01, 0.1, 0.2, 0.5, 0.8, 1)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
# Perform boosting for each shrinkage value
for (i in seq_along(shrinkage_values)) {
# Fit the boosting model
boost_model <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian",
n.trees = 1000, shrinkage = shrinkage_values[i])
# Make predictions on the training set
predictions <- predict(boost_model, train_set, n.trees = 1000)
# Calculate Mean Squared Error
mse <- mean((exp(predictions) - exp(train_set$Salary))^2)  # Back-transform from log scale
results$MSE[i] <- mse
}
set.seed(123)
shrinkage_values <- c(0.001, 0.01, 0.1, 0.2, 0.5, 0.8, 1)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
# Perform boosting for each shrinkage value
for (i in seq_along(shrinkage_values)) {
# Fit the boosting model
boost_model <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian",
n.trees = 1000, shrinkage = shrinkage_values[i])
# Make predictions on the training set
predictions <- predict(boost_model, hitters_train, n.trees = 1000)
# Calculate Mean Squared Error
mse <- mean((exp(predictions) - exp(hitters_train$Salary))^2)  # Back-transform from log scale
results$MSE[i] <- mse
}
plot(results$shrinkage, results$MSE, type = "b", xlab = "Shrinkage", ylab = "Training Set MSE")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- (Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
library(ISLR2)
library(tree)
library(randomForest)
library(BART)
library(gbm)
set.seed(123)
carseats_train <- sample(1:nrow(Carseats), nrow(Carseats) / 2)
carseats_test <- Carseats[-carseats_train, "Sales"]
tree_carseats <- tree(Sales ~ ., Carseats, subset = carseats_train)
summary(tree_carseats)
plot(tree_carseats)
text(tree_carseats, pretty = 0)
yhat_carseats <- predict(tree_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_carseats - carseats_test)^2), "\n")
cv_carseats <- cv.tree(tree_carseats)
plot(cv_carseats$size, cv_carseats$dev, type = "b")
# The best value is 6
prune_carseats <- prune.tree(tree_carseats, best = 6)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
yhat_cv_carseats <- predict(prune_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_cv_carseats - carseats_test)^2), "\n")
set.seed(123)
bag_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 10, importance = TRUE)
bag_carseats
yhat_bag_carseats <- predict(bag_carseats, newdata = Carseats[-carseats_train, ])
importance(bag_carseats)
varImpPlot(bag_carseats)
cat("MSE:", mean((yhat_bag_carseats - carseats_test)^2), "\n")
set.seed(123)
rf_carseats <- randomForest(Sales ~ ., data = Carseats, subset = carseats_train, mtry = 5, importance = TRUE)
yhat_rf_carseats <- predict(rf_carseats, newdata = Carseats[-carseats_train, ])
cat("MSE:", mean((yhat_rf_carseats - carseats_test)^2), "\n")
importance(rf_carseats)
varImpPlot(rf_carseats)
x_carseats <- Carseats[, 1:11]
y_carseats <- Carseats[, "Sales"]
xtrain_carseats <- x_carseats[carseats_train, ]
ytrain_carseats <- y_carseats[carseats_train]
xtest_carseats <- x_carseats[-carseats_train, ]
ytest_carseats <- y_carseats[-carseats_train]
set.seed(123)
bart_carseats <- gbart(xtrain_carseats, ytrain_carseats, x.test = xtest_carseats)
yhat_bart_carseats <- bart_carseats$yhat.test.mean
cat("MSE:", mean((ytest_carseats - yhat_bart_carseats)^2), "\n")
set.seed(123)
oj_train <- sample(1:nrow(OJ), 800)
oj_test <- OJ[-oj_train, "Purchase"]
tree_oj <- tree(Purchase ~ ., OJ, subset = oj_train)
summary(tree_oj)
tree_oj
plot(tree_oj)
text(tree_oj, pretty = 0)
set.seed(123)
oj_train_index <- sample(1:nrow(OJ), 800)
oj_train <- OJ[oj_train_index, ]
oj_test <- OJ[-oj_train_index, ]
tree_pred_oj <- predict(tree_oj, newdata = oj_test, type = "class")
table(tree_pred_oj, oj_test$Purchase)
oj_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_test_acc, "%", "\n")
oj_test_err <- 100 - oj_test_acc
cat("Test error rate:", oj_test_err, "%", "\n")
set.seed(123)
cv_oj <- cv.tree(tree_oj, FUN = prune.misclass)
names(cv_oj)
cv_oj
par(mfrow = c(1,2))
plot(cv_oj$size, cv_oj$dev, type = "b")
plot(cv_oj$k, cv_oj$dev, type = "b")
prune_oj <- prune.misclass(tree_oj, best = 5)
plot(prune_carseats)
text(prune_carseats, pretty = 0)
summary(prune_oj)
tree_pred_oj_cv <- predict(prune_oj, oj_test, type = "class")
table(tree_pred_oj_cv, oj_test$Purchase)
oj_cv_test_acc <- ((150 + 70) / 270) * 100
cat("Test accuracy rate:", oj_cv_test_acc, "%", "\n")
oj_cv_test_err <- 100 - oj_cv_test_acc
cat("Test error rate:", oj_cv_test_err, "%", "\n")
Hitters <- na.omit(Hitters)
Hitters$Salary <- log(Hitters$Salary)
hitters_train <- Hitters[1:200, ]
hitters_test <- Hitters[201:nrow(Hitters), ]
set.seed(123)
shrinkage_values <- c(0.001, 0.01, 0.1, 0.2, 0.5, 0.8, 1)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
for (i in seq_along(shrinkage_values)) {
boost_model <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian",
n.trees = 1000, shrinkage = shrinkage_values[i])
predictions <- predict(boost_model, hitters_train, n.trees = 1000)
mse <- mean((exp(predictions) - exp(hitters_train$Salary))^2)  # Back-transform from log scale
results$MSE[i] <- mse
}
plot(results$shrinkage, results$MSE, type = "b", xlab = "Shrinkage", ylab = "Training Set MSE")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
View(boost_model)
set.seed(123)
shrinkage_values <- c(0.001, 0.01, 0.1, 0.2, 0.5, 0.8, 1)
results <- data.frame(shrinkage = shrinkage_values, MSE = numeric(length(shrinkage_values)))
for (i in seq_along(shrinkage_values)) {
boost_hitters <- gbm(Salary ~ ., data = hitters_train, distribution = "gaussian",
n.trees = 1000, shrinkage = shrinkage_values[i])
predictions <- predict(boost_hitters, hitters_train, n.trees = 1000)
mse <- mean((exp(predictions) - exp(hitters_train$Salary))^2)  # Back-transform from log scale
results$MSE[i] <- mse
}
plot(results$shrinkage, results$MSE, type = "b", xlab = "Shrinkage", ylab = "Training Set MSE")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- (Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- pcr(Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
library(ISLR2)
library(tree)
library(randomForest)
library(BART)
library(gbm)
library(pls)
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- pcr(Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
validationplot(hitters_pcr, val.type = "MSEP")
# variables seems to have the lowest MSEP
summary(hitters_pcr)
hitters_pcr_pred <- predict(hitters_pcr, hitters_test, ncomp = 10)
cat("PCR Model Test MSE:", mean((hitters_pcr_pred - hitters_test$Salary)^2), "\n")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- pcr(Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
validationplot(hitters_pcr, val.type = "MSEP")
# 6 variables seems to have the lowest MSEP
summary(hitters_pcr)
hitters_pcr_pred <- predict(hitters_pcr, hitters_test, ncomp = 6)
cat("PCR Model Test MSE:", mean((hitters_pcr_pred - hitters_test$Salary)^2), "\n")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- pcr(Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
validationplot(hitters_pcr, val.type = "MSEP")
# 6 variables seems to have the lowest MSEP
hitters_pcr_pred <- predict(hitters_pcr, hitters_test, ncomp = 6)
cat("PCR Model Test MSE:", mean((hitters_pcr_pred - hitters_test$Salary)^2), "\n")
set.seed(123)
# Boosting model
pred_boost_hitters <- predict(boost_hitters, newdata = hitters_test, n.trees = 1000, shrinkage = 1.0)
mse_boost_hitters <- mean((exp(pred_boost_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Boosting Model Test MSE:", mse_boost_hitters, "\n")
# Linear model
hitters_lm <- lm(Salary ~ ., data = hitters_train)
pred_hitters_lm <- predict(hitters_lm, newdata = hitters_test)
mse_hitters_lm <- mean((exp(pred_hitters_lm) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Linear Model Test MSE:", mse_hitters_lm, "\n")
# PCR model
hitters_pcr <- pcr(Salary ~ ., data = hitters_train, scale = TRUE, validation = "CV")
validationplot(hitters_pcr, val.type = "MSEP")
# 6 variables seems to have the lowest MSEP
hitters_pcr_pred <- predict(hitters_pcr, hitters_test, ncomp = 6)
mse_hitters_pcr <- mean((exp(hitters_pcr_pred) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("PCR Model Test MSE:", mse_hitters_pcr, "\n")
summary(boost_hitters)
set.seed(123)
bag_hitters <- randomForest(Salary ~ ., data = hitters_train, mtry = 19, importance = TRUE)
bag_hitters
set.seed(123)
bag_hitters <- randomForest(Salary ~ ., data = hitters_train, mtry = 19, importance = TRUE)
bag_hitters
yhat_bag_hitters <- predict(bag_hitters, newdata = hitters_test)
cat("Bagged MSE:", mean((yhat_bag_hitters - hitters_test)^2), "\n")
set.seed(123)
bag_hitters <- randomForest(Salary ~ ., data = hitters_train, mtry = 19, importance = TRUE)
bag_hitters
yhat_bag_hitters <- predict(bag_hitters, newdata = hitters_test)
cat("Bagged MSE:", mean((yhat_bag_hitters - hitters_test$Salary)^2), "\n")
set.seed(123)
bag_hitters <- randomForest(Salary ~ ., data = hitters_train, mtry = 19, importance = TRUE)
bag_hitters
yhat_bag_hitters <- predict(bag_hitters, newdata = hitters_test)
mse_hitters_bag <- mean((exp(yhat_bag_hitters) - exp(hitters_test))^2)  # Back-transform from log scale
set.seed(123)
bag_hitters <- randomForest(Salary ~ ., data = hitters_train, mtry = 19, importance = TRUE)
bag_hitters
yhat_bag_hitters <- predict(bag_hitters, newdata = hitters_test)
mse_hitters_bag <- mean((exp(yhat_bag_hitters) - exp(hitters_test$Salary))^2)  # Back-transform from log scale
cat("Bagged Model Test MSE:", mse_hitters_bag, "\n")
