weekly_nb2 <- naiveBayes(Direction ~ Lag1 + Lag2, data = Weekly, subset = weekly_train)
weekly_nb2
weekly_nb_class2 <- predict(weekly_nb2, direction_test)
table(weekly_nb_class2, direction_test)
mean(weekly_nb_class2 == direction_test)
mean(weekly_nb_class2 != direction_test)
# Naive Bayes with Lag1, Lag2, and Volume squared
weekly_nb2 <- naiveBayes(Direction ~ Lag1 + Lag2 + Volume^2, data = Weekly, subset = weekly_train)
weekly_nb2
weekly_nb_class2 <- predict(weekly_nb2, direction_test)
table(weekly_nb_class2, direction_test)
mean(weekly_nb_class2 == direction_test)
mean(weekly_nb_class2 != direction_test)
names(Boston)
dim(Boston)
summary(Boston)
cor(Boston)
pairs(Boston)
median_crim <- median(Boston$crim)
Boston$med_crime <- ifelse(Boston$crim > median_crim, 1, 0)
boston_log <- glm(med_crime ~ zn + indus + chas + nox + rm + age + dis + rad + tax + ptratio + black + lstat + medv, data = Boston, family = binomial)
summary(boston_log)
boston_train <- Boston[1:350, ]
boston_test <- Boston[-(1:350), ]
med_crime_test <- Boston$med_crime[-(1:350)]
boston_log2 <- glm(med_crime ~ zn + nox + dis + rad + tax + ptratio + black + medv, data = boston_train, family = binomial)
boston_probs_log2 <- predict(boston_log2, boston_test, type = "response")
boston_pred_log2 <- rep(0, nrow(boston_test))
boston_pred_log2[boston_probs_log2 > 0.5] = 1
table(boston_pred_log2, med_crime_test)
mean(boston_pred_log2 == med_crime_test)
mean(boston_pred_log2 != med_crime_test)
boston_lda <- lda(med_crime ~ zn + nox + dis + rad + tax + ptratio + black + medv, data = boston_train)
boston_lda
boston_lda_class <- predict(boston_lda, boston_test)$class
table(boston_lda_class, med_crime_test)
mean(boston_lda_class == med_crime_test)
mean(boston_lda_class != med_crime_test)
boston_qda <- qda(med_crime ~ zn + nox + dis + rad + tax + ptratio + black + medv, data = boston_train)
boston_qda
boston_qda_class <- predict(boston_qda, boston_test)$class
table(boston_qda_class, med_crime_test)
mean(boston_qda_class == med_crime_test)
mean(boston_qda_class != med_crime_test)
boston_nb <- naiveBayes(med_crime ~ zn + nox + dis + rad + tax + ptratio + black + medv, data = boston_train)
boston_nb
boston_nb_class <- predict(boston_nb, boston_test)
table(boston_nb_class, med_crime_test)
mean(boston_nb_class == med_crime_test)
mean(boston_nb_class != med_crime_test)
predictors <- c("zn", "nox", "dis", "rad", "tax", "ptratio", "black", "medv")
X <- Boston[, predictors]
y <- Boston$med_crime
train_indices <- 1:350
X_train <- X[train_indices, ]
y_train <- y[train_indices]
test_indices <- (351:nrow(Boston))
X_test <- X[test_indices, ]
y_test <- y[test_indices]
set.seed(1)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 1)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 5)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 10)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 20)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 30)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_log3 <- glm(med_crime ~ nox + dis + rad + ptratio, data = boston_train, family = binomial)
boston_probs_log3 <- predict(boston_log3, boston_test, type = "response")
boston_pred_log3 <- rep(0, nrow(boston_test))
boston_pred_log3[boston_probs_log3 > 0.5] = 1
table(boston_pred_log3, med_crime_test)
mean(boston_pred_log3 == med_crime_test)
mean(boston_pred_log3 != med_crime_test)
boston_lda2 <- lda(med_crime ~ nox + dis + rad + ptratio, data = boston_train)
boston_lda2
boston_lda_class2 <- predict(boston_lda2, boston_test)$class
table(boston_lda_class2, med_crime_test)
mean(boston_lda_class2 == med_crime_test)
mean(boston_lda_class2 != med_crime_test)
boston_qda2 <- qda(med_crime ~ nox + dis + rad + ptratio, data = boston_train)
boston_qda2
boston_qda_class2 <- predict(boston_qda2, boston_test)$class
table(boston_qda_class2, med_crime_test)
mean(boston_qda_class2 == med_crime_test)
mean(boston_qda_class2 != med_crime_test)
boston_nb <- naiveBayes(med_crime ~ nox + dis + rad + ptratio, data = boston_train)
boston_nb
boston_nb_class <- predict(boston_nb, boston_test)
table(boston_nb_class, med_crime_test)
mean(boston_nb_class == med_crime_test)
mean(boston_nb_class != med_crime_test)
predictors <- c("nox", "dis", "rad", "ptratio")
X <- Boston[, predictors]
y <- Boston$med_crime
train_indices <- 1:350
X_train <- X[train_indices, ]
y_train <- y[train_indices]
test_indices <- (351:nrow(Boston))
X_test <- X[test_indices, ]
y_test <- y[test_indices]
set.seed(1)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 1)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 5)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 10)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 20)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
boston_knn <- knn(train = X_train, test = X_test, cl = y_train, k = 30)
table(boston_knn, y_test)
mean(boston_knn == med_crime_test)
mean(boston_knn != med_crime_test)
methods_table_all_sig_predictors <- data.frame(
Method = c("Logistic", "LDA", "QDA", "Naive Bayes", "KNN (K = 20)"),
Accuracy = c("93.6%", "92.9%", "13.5%", "44.2%", "94.9%"),
Error = c("6.4%", "7.1%", "86.5%", "55.8%", "5.1%")
)
title1 <- "All Significant Predictors"
cat(title1, "\n")
print(methods_table_all_sig_predictors)
methods_table_four_predictors <- data.frame(
Method = c("Logistic", "LDA", "QDA", "Naive Bayes", "KNN (K = 5 or 10)"),
Accuracy = c("93.6%", "93.6%", "5.8%", "10.9%", "94.9%"),
Error = c("6.4%", "6.4%", "94.1%", "89.1%", "5.1%")
)
title2 <- "Four Most Significant Predictors"
cat(title2, "\n")
print(methods_table_four_predictors)
default_lmodel <- glm(default ~ income + balance, data = Default)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
data(Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
View(Default)
data(Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
library(ISLR2)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
library(ISLR2)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
library(ISLR2)
library(tidyverse)
Default <- read_csv("Default.csv")
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
library(ISLR2)
Default <- read.csv("Default.csv")
set.seed(123)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default$default <- as.numeric(Default$default == "yes")
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
View(Default)
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
library(ISLR2)
Default <- read.csv("Default.csv")
set.seed(123)
Default$default <- ifelse(Default$default == "yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
set.seed(123)
Default <- Default %>%
mutate(default = if_else(default == "yes", 1, 0))
library(ISLR2)
library(tidyverse)
Default <- read_csv("Default.csv")
set.seed(123)
Default <- Default %>%
mutate(default = if_else(default == "yes", 1, 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
library(ISLR2)
Default <- read.csv("Default.csv")
set.seed(123)
Default$default <- as.numeric(factor(Default$default, levels = c("no", "yes")) - 1)
default_lmodel <- glm(default ~ income + balance, data = Default)
View(Default)
library(ISLR2)
library(tidyverse)
Default <- read_csv("Default.csv")
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "yes" = 1, "no" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default <- Default %>%
mutate(default = recode(default, "Yes" = 1, "No" = 0))
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default$default <- ifelse(trimws(Default$default) == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default$default <- ifelse(trimws(Default$default) == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
set.seed(123)
Default$default <- ifelse(trimws(Default$default) == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
library(ISLR2)
Default <- read.csv("Default.csv")
set.seed(123)
Default$default <- ifelse(Default$default) == "Yes", 1, 0)
set.seed(123)
Default$default <- ifelse(Default$default == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
boot.fn(Default, 1:10000, replace=T)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
boot.fn(Default, 1:10000)
boot(Default, boot.fn, 1000)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
boot.fn(Default, 1:10000)
boot(Default, boot.fn, 1000)
install.packages("boot")
library(ISLR2)
library(boot)
Default <- read.csv("Default.csv")
set.seed(123)
Default$default <- ifelse(Default$default == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
boot.fn(Default, 1:10000)
boot(Default, boot.fn, 1000)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
boot(Default, boot.fn, 1000)
set.seed(123)
boot(Default, boot.fn, 1000)
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
# Create a data.table for comparison
comparison_table <- data.table(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
std_err_compare <- data.table(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
install.packages("data.table")
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
std_err_compare <- data.table(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
library(ISLR2)
library(boot)
library(data.table)
Default <- read.csv("Default.csv")
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
std_err_compare <- data.table(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
print(std_err_compare)
library(ISLR2)
library(boot)
Default <- read.csv("Default.csv")
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
std_err_compare <- data.frame(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
print(std_err_compare)
mu_hat <- mean(Boston$medv)
mu_hat <- mean(Boston$medv)
print(mu_hat)
se_mu_hat <- sd(Boston$medv) / sqrt(length(Boston$medv))
print(se_mu_hat)
mean.fn <- function(data, index) {
sample_data <- data$medv[index]
return(mean(sample_data))
}
set.seed(123)
boot(Boston, mean.fn, R = 1000)
mean.fn <- function(data, index) {
sample_data <- data$medv[index]
return(mean(sample_data))
}
set.seed(123)
boot(Boston, mean.fn, R = 1000)
ci <- c(mu_hat - 2 * se_mu_hat, mu_hat + 2 * se_mu_hat)
print(ci)
ci <- c(mu_hat - 2 * se_mu_hat, mu_hat + 2 * se_mu_hat)
print(ci)
t.test(Boston$medv)
bs_se_mu_hat <- 0.4045557
ci <- c(mu_hat - 2 * bs_se_mu_hat, mu_hat + 2 * bs_se_mu_hat)
print(ci)
t.test(Boston$medv)
mu_hat_med <- median(Boston$medv)
mu_hat_med <- median(Boston$medv)
mu_hat_med
mu_hat_med <- median(Boston$medv)
print(mu_hat_med)
median.fn <- function(data, index) {
sample_data <- data$medv[index]
return(median(sample_data))
}
set.seed(123)
boot(Boston, median.fn, R = 1000)
mu_hat_0.1 <- quantile(Boston$medv, 0.1)
mu_hat_0.1 <- quantile(Boston$medv, 0.1)
mu_hat_0.1
mu_hat_0.1 <- quantile(Boston$medv, 0.5)
mu_hat_0.1
mu_hat_0.1 <- quantile(Boston$medv, 0.1)
mu_hat_0.1
tenth.fn <- function(data, index) {
sample_data <- data$medv[index]
return(quantile(sample_data, 0.1))
}
set.seed(123)
boot(Boston, tenth.fn, R = 1000)
library(ISLR2)
library(boot)
Default <- read.csv("Default.csv")
set.seed(123)
Default$default <- ifelse(Default$default == "Yes", 1, 0)
default_lmodel <- glm(default ~ income + balance, data = Default)
summary(default_lmodel)
boot.fn <- function(data, index) {
coef(glm(default ~ income + balance, data = data, subset = index))
}
set.seed(123)
boot(Default, boot.fn, 1000)
glm_std_errors <- c(1.274e-07, 3.514e-06)
boot_std_errors <- c(1.297e-07, 6.606e-06)
std_err_compare <- data.frame(
Method = c("glm()", "boot()"),
Std_Error = c(glm_std_errors, boot_std_errors),
Variable = rep(c("Income", "Balance"), each = 2)
)
print(std_err_compare)
mu_hat <- mean(Boston$medv)
print(mu_hat)
se_mu_hat <- sd(Boston$medv) / sqrt(length(Boston$medv))
print(se_mu_hat)
mean.fn <- function(data, index) {
sample_data <- data$medv[index]
return(mean(sample_data))
}
set.seed(123)
boot(Boston, mean.fn, R = 1000)
bs_se_mu_hat <- 0.4045557
ci <- c(mu_hat - 2 * bs_se_mu_hat, mu_hat + 2 * bs_se_mu_hat)
print(ci)
t.test(Boston$medv)
mu_hat_med <- median(Boston$medv)
print(mu_hat_med)
median.fn <- function(data, index) {
sample_data <- data$medv[index]
return(median(sample_data))
}
set.seed(123)
boot(Boston, median.fn, R = 1000)
mu_hat_0.1 <- quantile(Boston$medv, 0.1)
mu_hat_0.1
tenth.fn <- function(data, index) {
sample_data <- data$medv[index]
return(quantile(sample_data, 0.1))
}
set.seed(123)
boot(Boston, tenth.fn, R = 1000)
